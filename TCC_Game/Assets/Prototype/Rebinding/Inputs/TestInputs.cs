//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Prototype/Rebinding/Inputs/TestInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TestInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TestInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TestInputs"",
    ""maps"": [
        {
            ""name"": ""Test"",
            ""id"": ""fd76f710-c257-419c-b39a-f22e7752b325"",
            ""actions"": [
                {
                    ""name"": ""Test_1"",
                    ""type"": ""Button"",
                    ""id"": ""e64ae2cb-1786-4c7f-9853-a00e294621b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test_2"",
                    ""type"": ""Button"",
                    ""id"": ""f3f3ba61-5917-4775-89ae-8c33f04ec1c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test_Vector2"",
                    ""type"": ""Value"",
                    ""id"": ""f9037458-b26a-4dad-8f08-3bf1d8803f38"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d59fe556-f564-4ff1-bd34-04d308c86482"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Test_1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa1e2258-f61f-4f29-89bf-17e19efd3fc7"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Test_2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""2905db78-65f7-4f15-8825-ceac853e262c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test_Vector2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7cf5b6d2-46ac-4ff2-bc95-321bc876b175"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Test_Vector2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6a71c1f5-82f6-4cef-8a3c-a58e7fe75a1f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Test_Vector2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a9b8bdc6-f9ed-439d-af1d-0407ed1d93df"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Test_Vector2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""466381f5-3791-44e4-9a9e-4b04db515768"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Test_Vector2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Test
        m_Test = asset.FindActionMap("Test", throwIfNotFound: true);
        m_Test_Test_1 = m_Test.FindAction("Test_1", throwIfNotFound: true);
        m_Test_Test_2 = m_Test.FindAction("Test_2", throwIfNotFound: true);
        m_Test_Test_Vector2 = m_Test.FindAction("Test_Vector2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Test
    private readonly InputActionMap m_Test;
    private ITestActions m_TestActionsCallbackInterface;
    private readonly InputAction m_Test_Test_1;
    private readonly InputAction m_Test_Test_2;
    private readonly InputAction m_Test_Test_Vector2;
    public struct TestActions
    {
        private @TestInputs m_Wrapper;
        public TestActions(@TestInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Test_1 => m_Wrapper.m_Test_Test_1;
        public InputAction @Test_2 => m_Wrapper.m_Test_Test_2;
        public InputAction @Test_Vector2 => m_Wrapper.m_Test_Test_Vector2;
        public InputActionMap Get() { return m_Wrapper.m_Test; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestActions set) { return set.Get(); }
        public void SetCallbacks(ITestActions instance)
        {
            if (m_Wrapper.m_TestActionsCallbackInterface != null)
            {
                @Test_1.started -= m_Wrapper.m_TestActionsCallbackInterface.OnTest_1;
                @Test_1.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnTest_1;
                @Test_1.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnTest_1;
                @Test_2.started -= m_Wrapper.m_TestActionsCallbackInterface.OnTest_2;
                @Test_2.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnTest_2;
                @Test_2.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnTest_2;
                @Test_Vector2.started -= m_Wrapper.m_TestActionsCallbackInterface.OnTest_Vector2;
                @Test_Vector2.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnTest_Vector2;
                @Test_Vector2.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnTest_Vector2;
            }
            m_Wrapper.m_TestActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Test_1.started += instance.OnTest_1;
                @Test_1.performed += instance.OnTest_1;
                @Test_1.canceled += instance.OnTest_1;
                @Test_2.started += instance.OnTest_2;
                @Test_2.performed += instance.OnTest_2;
                @Test_2.canceled += instance.OnTest_2;
                @Test_Vector2.started += instance.OnTest_Vector2;
                @Test_Vector2.performed += instance.OnTest_Vector2;
                @Test_Vector2.canceled += instance.OnTest_Vector2;
            }
        }
    }
    public TestActions @Test => new TestActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface ITestActions
    {
        void OnTest_1(InputAction.CallbackContext context);
        void OnTest_2(InputAction.CallbackContext context);
        void OnTest_Vector2(InputAction.CallbackContext context);
    }
}
